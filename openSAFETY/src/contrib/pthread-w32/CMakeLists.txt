CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

PROJECT (pthread-w32)

SET ( PTHREAD_SRCS
    ${PROJECT_SOURCE_DIR}/attr.c
    ${PROJECT_SOURCE_DIR}/barrier.c
    ${PROJECT_SOURCE_DIR}/cancel.c
    ${PROJECT_SOURCE_DIR}/cleanup.c
    ${PROJECT_SOURCE_DIR}/condvar.c
    ${PROJECT_SOURCE_DIR}/create.c
    ${PROJECT_SOURCE_DIR}/dll.c
    ${PROJECT_SOURCE_DIR}/errno.c
    ${PROJECT_SOURCE_DIR}/exit.c
    ${PROJECT_SOURCE_DIR}/fork.c
    ${PROJECT_SOURCE_DIR}/global.c
    ${PROJECT_SOURCE_DIR}/misc.c
    ${PROJECT_SOURCE_DIR}/mutex.c
    ${PROJECT_SOURCE_DIR}/nonportable.c
    ${PROJECT_SOURCE_DIR}/private.c
    ${PROJECT_SOURCE_DIR}/rwlock.c
    ${PROJECT_SOURCE_DIR}/sched.c
    ${PROJECT_SOURCE_DIR}/semaphore.c
    ${PROJECT_SOURCE_DIR}/signal.c
    ${PROJECT_SOURCE_DIR}/spin.c
    ${PROJECT_SOURCE_DIR}/sync.c
    ${PROJECT_SOURCE_DIR}/tsd.c
    ${PROJECT_SOURCE_DIR}/semaphore.h
    ${PROJECT_SOURCE_DIR}/implement.h
    ${PROJECT_SOURCE_DIR}/pthread.h
    ${PROJECT_SOURCE_DIR}/sched.h
    ${PROJECT_SOURCE_DIR}/version.rc
)

IF (CMAKE_COMPILER_IS_GNUCC)
    ADD_DEFINITIONS ( "-I${PROJECT_SOURCE_DIR} -D_WIN32_WINNT=0x400 -DHAVE_CONFIG_H -DPTW32_RC_MSC -D__CLEANUP_C ")
ELSE (CMAKE_COMPILER_IS_GNUCC)
    ADD_DEFINITIONS ( "/I${PROJECT_SOURCE_DIR} /D_WIN32_WINNT=0x400 /DHAVE_CONFIG_H /DPTW32_RC_MSC /D__CLEANUP_C ")
ENDIF (CMAKE_COMPILER_IS_GNUCC)

INCLUDE_DIRECTORIES ( "${PROJECT_SOURCE_DIR}" )

SET (LIB_TYPE "SHARED")
ADD_LIBRARY ( pthread-w32 ${LIB_TYPE} ${PTHREAD_SRCS} )
TARGET_LINK_LIBRARIES ( pthread-w32 ${ADD_ADDITIONAL_LIBRARIES} "ws2_32" )

INSTALL ( TARGETS pthread-w32 
            RUNTIME DESTINATION lib 
            LIBRARY DESTINATION lib 
            ARCHIVE DESTINATION lib/static
         )

INSTALL (DIRECTORY ${PROJECT_SOURCE_DIR}/ DESTINATION include/opensafety 
            FILES_MATCHING PATTERN "*.h" ) 